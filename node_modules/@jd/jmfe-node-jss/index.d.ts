/// <reference types="node" />
import { CoreOptions, Response, Request, NameValuePair } from 'request';
import requestPromise from 'request-promise';
import { IOptions } from 'glob';

declare class JSS {
    constructor(endpoint: string, accessKey: string, secretKey: string, useHttps?: boolean);

    /**
     * 新建一个 Bucket 对象，该对象封装了对 Bucket 的操作
     * @param bucketName bucket的名字;
     * @returns {Bucket} 新建的 Bucket 对象
     */
    bucket(bucketName: string): JSS.Bucket;

    /**
     * 列出所有 bucket 的名字
     * @example
     * jss.listBucket().then(function (res) {
     *     console.log(res)
     * }).catch(function (err) {
     *     console.log(err)
     * })
     */
    listBucket(): Promise<string[]>;

    /**
     * 是否拥有指定名字的 bucket
     * @returns 拥有则为 true，否则为 false
     * @example
     * jss.listBucket().then(function (res) {
     *     console.log(res)
     * }).catch(function (err) {
     *     console.log(err)
     * })
     */
    hasBucket(name: string): Promise<boolean>;

    /**
     * 设置全局默认的请求参数
     * @param defaultOption 全局默认的请求参数
     */
    setDefaultRequestOptions<TOptions extends CoreOptions>(defaultOption: TOptions);
}

declare namespace JSS {
    export interface JSSOptions {
        /**
         * 所要连接的 endpoint 地址
         */
        endpoint: string;

        /**
         * 字符串 accessKey
         */
        accessKey: string;

        /**
         * 字符串 secretKey
         */
        secretKey: string;

        /**
         * 是否使用 https
         */
        useHttps?: boolean;
    }

    export interface Bucket {
        /**
         * 新建一个 Bucket
         * 每个用户最多可以创建 100个Bucket，每个 Bucket 中可以存放无限多个 Object。Bucket 不能嵌套。
         * Bucket 的名称全局唯一且严格的限制，包括：
         * 1. 仅包含小写英文字母（a-z），数字，点（.）和横线（-）
         * 2. 必须由字母或数字开头和结尾
         * 3. 长度在 3 和 63 个字符之间
         * 4. 不能为IP地址形式，比如192.168.1.1
         * 5. 不能包含连续的点（.）与横线(-)组合
         * @returns {requestPromise.RequestPromise} resolve，成功时 statusCode 为 200, 返回的Body为空;
         * @example
         * ```js
         * var bkt=jss.bucket('test-bucket');
         * bkt.create().then((res)=>{
         *     console.log('新建 bucket 成功');
         * }.catch((err)=>{
         *     console.log('新建 bucket 失败：'+err.message);
         * })
         * ```
         */
        create(): requestPromise.RequestPromise;

        /**
         * 删除一个 Bucket
         * @returns {requestPromise.RequestPromise} resolve，成功时 statusCode 为 204, 返回的Body为空;
         * @example
         *```js
        * var bkt=jss.bucket('test-bucket');
        * bkt.delete().then((res)=>{
        *     console.log('删除 bucket 成功');
        * }.catch((err)=>{
        *     console.log('删除 bucket 失败：'+err.message);
        * })
        *```
        */
        delete(): requestPromise.RequestPromise;

        /**
         * 创建一个 JssObject
         * @param {string} key Object的名字;
         * @returns {JssObject} 新建的 JssObject 对象
         * @example
         * var object=jss.bucket('bucket-name').object('object-name')
         */
        object(key: string): JSSObject;

        /**
         * 创建一个 acl 对象
         * @returns {Acl} 新建的 acl 对象
         * @example
         * var acl=jss.bucket('bucket-name').acl()
         */
        acl(): Acl;

        /**
         * 列出 指定Bucket中的Object信息列表
         * 请求时可以通过一些查询条件来限制返回的结果。
         * @public
         * @param {string} marker 返回以字典序排序的 Object 信息的起始标志，结果中不包含marker，通常与max-keys一起使用来实现分页
         * @param {integer} maxKeys 返回Object信息的数量，最大为1000，若有更多符合查询条件的Object信息没有被返回，则响应中会包含HasNext为true元素，同时可以设定marker为本次列表最后一个Key，来获取其他的本次操作未返回的Object信息。默认为1000
         * @param {string} prefix 限制返回Object的Key的前缀
         * @param {string} delimiter 分组符，用于分组返回的Object的Key。当prefix未指定时，从Object的Key中提取第一个字符到第一个delimiter之间的字符串放在CommonPrefixes中返回。若指定了prefix，则提取prefix到第一个delimiter之间的字符串放在CommonPrefixes中返回
         * @returns {requestPromise.RequestPromise} resolve，成功时 statusCode 为 200, 返回的 Body 为 json 格式，包含以下字段：
         *
         * | 字段 | 含义 |
         * | --- | --- |
         * | Name | Bucket的名称 |
         * | Delimiter | 指定的Delimiter分组符 |
         * | Prefix | 指定的Object Key的前缀 |
         * | MaxKeys | 指定的Object的数量 |
         * | Marker | 指定的Object的Key的起始标志 |
         * | NextMarker | 列出下一个集合的Marker，只有当用户设置了delimiter 且 HasNext为true时才会出现，其值可能是当前集合中最后一个Key，或是CommonPrefixes中最后一个Prefix, 若用户没有设置delimiter，且HasNext为true时，可以直接将返回集合中的最后一个Key作为列出下一个结合的Marker |
         * | HasNext | 标识返回的结果是否完整 （true or false），若符合条件的Object 信息数量超过了指定的MaxKeys，则该值为true，且多余的结果也不会被返回。 |
         * | Contents | 包含了一个Object信息的容器 |
         * | Key | Object的Key |
         * | LastModified | Object的最后修改时间 |
         * | ETag | Object的ETag是一个MD5 hash值，其只反映Object内容的变化，而不是元数据(Metadata) |
         * | Size | Object的大小 |
         * | CommonPrefixes | 用户指定了Delimiter时，该元素才会出现。用于存放分组后Object Key前缀。 |
         *
         *
         * 例如：
         *
         * ```js
         * {
         *      Name: 'pro-test',
         *      Prefix: null,
         *      Marker: null,
         *      Delimiter: null,
         *      MaxKeys: 2,
         *      HasNext: true,
         *      Contents:[
         *          {
         *              Key: 'pro-a.txt',
         *              LastModified: 'Mon, 11 Sep 2017 17:47:04 GMT',
         *              ETag: '0cc175b9c0f1b6a831c399e269772661',
         *              Size: 1
         *          },
         *          {
         *              Key: 'pro-b.txt',
         *              LastModified: 'Mon, 11 Sep 2017 17:47:15 GMT',
         *              ETag: '92eb5ffee6ae2fec3ad71c777531578f',
         *              Size: 1
         *          }
         *      ],
         *      CommonPrefixes: null
         * }
         * ```
         *
         *  @example
         * ```js
         * jss.bucket('pro-test').listObject(undefined, 2, '', undefined).then((res)=> {
         *      console.log(res);
         *      if (res.HasNext) {
         *          var marker = res.Contents[res.Contents.length - 1].Key;
         *          jss.bucket('pro-test').listObject(marker, 1000).then((res)=> {
         *              console.log(res)
         *          }).catch((err)=> {
         *              console.log('listObject 2 失败：' + err.message);
         *          })
         *      }
         *  }).catch((err)=> {
         *      console.log('listObject 1 失败：' + err.message);
         *  })
         * ```
        */
        listObject(marker?: string, maxKeys?: number, prefix?: string, delimiter?: string): requestPromise.RequestPromise;

        /**
         * 上传本地指定目录下的所有文件，可以在options中对需要上传的文件进行过滤
         * @param {string} dir 所要上传的本地文件目录
         * @param {string} foldName 本地文件存放在bucket上的目录，可以不传
         * @param {object} options 文件过滤项，选项参考 glob[option] https://www.npmjs.com/package/glob#options，可以不传
         */
        uploadDir(dir: string, foldName?: string, options?: IOptions): requestPromise.RequestPromise;
    }

    export interface JSSObject {
        /**
         * 下载一个资源并读取其内容
         * @param isStream 是否要获取流
         */
        get(isStream: boolean): Request | requestPromise.RequestPromise;

        /**
         * 上传或替换一个资源
         * @param {string} path 要上传资源的本地路径
         * @returns {Promise.<Response.body>} resolve，成功时 statusCode 为 200, 返回的Body为空;
         * @example
         * jss.bucket('pro-test').object('test.html').put('/file/path')
         *    .then(function (res) {
         *        console.log('上传资源成功')
         *        console.log(res)
         * }).catch(function (err) {
         *     console.log('出错啦')
         *     console.log(err)
         * })
         */
        put(path: string, headers?: NameValuePair): Promise<string>;

        /**
         * 将内容上传并生成对应文件
         * @param value
         * @param headers
         */
        putBody(value: string | Buffer, headers?: NameValuePair): Promise<string>;

        /**
         * 下载资源并保存到本地，提供流式文件下载，以及下载进度回调
         * @example
         * jss.bucket('pro-test').object('object-name-here').saveToFile({
         *     targetPath: '/your/target/path/here',
         *     finishCb: function (err, contentLength) {
         *         if (err) {
         *             console.log(err.message);
         *             return;
         *         }
         *         console.log('文件下载完成，体积：' + (contentLength / 1024) + ' kb');
         *     },
         *     progressCb: function (progress) {
         *         console.log(progress);
         *     },
         *     throttleInterval: 200
         * });
         */
        saveToFile(options: SaveToFileOptions): requestPromise.RequestPromise;

        /**
         * 获取资源的元数据
         * @returns {Promise.<Response.body>} resolve，成功时 statusCode 为 200, resolve 的内容为元数据，形如：
         *
         *```js
         * { server: 'JDWS/1.0.0',
         * date: 'Fri, 15 Sep 2017 08:59:50 GMT',
         * 'content-type': 'text/plain',
         * 'content-length': '0',
         * connection: 'close',
         * 'x-jss-request-id': 'B5E4E800DEF0CA13',
         * 'content-disposition': 'attachment; filename="pro-a.txt"',
         * 'accept-ranges': 'bytes',
         * etag: '"0cc175b9c0f1b6a831c399e269772661"',
         * 'last-modified': 'Mon, 11 Sep 2017 17:47:04 GMT',
         * expires: 'Fri, 15 Sep 2017 08:59:50 GMT',
         * 'cache-control': 'max-age=0' }
         * ```
         *
         *  @example
         * ```js
         * jss.bucket('pro-test').object('pro-a.txt').head().then(function (res) {
         *     console.log(res)
         * }).catch(function (err) {
         *     console.log('出错啦')
         *     console.log(err)
         * })
         * ```
         */
        head(): requestPromise.RequestPromise;

        /**
         * 判断某个资源是否存在，资源存在时为 true， 不存在时为 false
         *
         * @example
         * ```js
        * jss.bucket('pro-test').object('pro-a.txt').exist().then(function (res) {
        *     console.log(res)
        * }).catch(function (err) {
        *     console.log(err)
        * })
        *```
        */
        exist(): Promise<boolean>;

        /**
         * 删除资源，成功时 statusCode 为 200, 返回的Body为空;
         * @example
         * ```js
         * jss.bucket('pro-test').object('pro-a.txt').delete().then(function (res) {
         *     console.log(res)
         * }).catch(function (err) {
         *     console.log('出错啦')
         *     console.log(err)
         * })
         * ```
        */
        delete(): requestPromise.RequestPromise;
    }

    interface SaveToFileOptions {
        /**
         * 要保存的目标路径
         */
        targetPath: string;

        /**
         * 任务完成回调; `function(error, transferredLength){}` 第一个参数为 error，如果不为空，说明出错啦; 第二个参数是下载完成的内容大小，单位为字节
         */
        finishCb?: (err, contentLength) => void;

        /**
         * 下载进度回调; `function(progressInfo){}` , progressInfo 是一个对象，字段及其含义如下： transferred,表示已经下载的大小; contentLength，表示文件的总大小，单位为字节; percentage，下载完成的百分比; runtime，已经消耗的时间; speed，下载速度单位为 byte/s
         */
        progressCb?: (progress) => void;

        /**
         * 下载进度回调的触发节流，需设置为 必须大于 0 并小于 10000 的整数，若不设置，默认 100 毫秒触发一次
         */
        throttleInterval?: number;
    }

    export interface Acl {
        /**
         * 允许任何人可读
         * 此方法仅起配置作用，请调用 set() 方法使配置生效
         * @example
         * ```js
         * jss.bucket('pro-test').acl().internetVisible(true).allowAnyoneRead().set().then(function (res) {
         *    console.log(res)
         * }).catch(function (err) {
         *    console.log('出错啦')
         *    console.log(err)
         * })
         * ```
         */
        allowAnyoneRead(): Acl;

        /**
         * 网络可见，即 Bucket 允许互联网上任何人匿名访问
         * 此方法仅起配置作用，请调用 set() 方法使配置生效
         * @param isVisible 是否可见，可见则为 true，不可见为 false
         * @example
         * ```js
         * jss.bucket('pro-test').acl().internetVisible(true).allowAnyoneRead().set().then(function (res) {
         *    console.log(res)
         * }).catch(function (err) {
         *    console.log('出错啦')
         *    console.log(err)
         * })
         * ```
         */
        internetVisible(isVisible?: boolean): Acl;

        /**
         * 增加一个权限设置
         * 即 Bucket 允许互联网上任何人匿名访问
         * 此方法仅起配置作用，请调用 set() 方法使配置生效
         * @param grantee 被授权人的 accessKey
         * @param permission 被授予的权限
         * @example
         * ```js
         * jss.bucket('pro-test').acl().internetVisible(true).grant('*','READ').set().then(function (res) {
         *    console.log(res)
         * }).catch(function (err) {
         *    console.log('出错啦')
         *    console.log(err)
         * })
         * ```
         */
        grant(grantee: string, permission: string): Acl;

        /**
         * 增加权限设置列表
         * 此方法仅起配置作用，请调用 set() 方法使配置生效
         * @param grants 是一个由配置对象组成的数组，
         * @example
         * ```js
         * jss.bucket('pro-test').acl().internetVisible(true).grants([{Grantee:'accesskey one',Permission:'READ'},{Grantee:'accesskey two',Permission:'READ'}]).set().then(function (res) {
         *    console.log(res)
         * }).catch(function (err) {
         *    console.log('出错啦')
         *    console.log(err)
         * })
         * ```
         */
        grants(grants: Grant[]): Acl;

        /**
         * 配置权限，使配置生效
         * @returns resolve，成功时 statusCode 为 200, 返回的Body为空;
         * @example
         * ```js
         * jss.bucket('pro-test').acl().internetVisible(true).allowAnyoneRead().set().then(function (res) {
         *    console.log(res)
         * }).catch(function (err) {
         *    console.log('出错啦')
         *    console.log(err)
         * })
         * ```
         */
        set(): requestPromise.RequestPromise;

        /**
         * 删除权限配置
         * 该 bucket 下所有的权限配置都会被删除，调用此方法后立即执行
         * @returns resolve，成功时 statusCode 为 200, 返回的Body为空;
         * @example
         * ```js
         * jss.bucket('pro-test').acl().delete().then(function (res) {
         *    console.log(res)
         * }).catch(function (err) {
         *    console.log('出错啦')
         *    console.log(err)
         * })
         * ```
         */

        delete(): requestPromise.RequestPromise;

        /**
         * 获取权限配置
         * 获取 bucket 下所有已配置的权限信息
         * @returns resolve，成功时 statusCode 为 200, 返回的 Body 格式如下：
         *```js
         * {
         *  "Bucket":"pro-test", // Bucket 名称
         *  "CreationDate":"Mon, 18 Sep 2017 14:47:59 GMT",   // Bucket 创建时间
         *  "AccessControlList":[{"Grantee":"*","Permission":"READ"}],  // 权限控制数组
         *  "Referer":null,  // Referer
         *  "InternetVisible":true  // 是否网络可见
         * }
         * ```
         *
         *  @example
         * ```js
         * jss.bucket('pro-test').acl().get().then(function (res) {
         *    console.log(res)
         * }).catch(function (err) {
         *    console.log('出错啦')
         *    console.log(err)
         * })
         * ```
        */
        get(): requestPromise.RequestPromise;
    }

    interface Grant {
        /**
         * grantee accesskey here
         */
        Grantee: string;

        /**
         * permission string
         */
        Permission: string;
    }
}

export = JSS;

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * @Author: zhuzhida
 * @Date: 2020-07-31 00:36:10
 * @Last Modified by: zhuzhida
 * @Last Modified time: 2020-09-23 17:05:35
 */
var inquirer = require('inquirer');
var oss_1 = __importDefault(require("../oss/oss"));
var oss_2 = require("../oss/oss");
var ossKey_1 = require("../model/ossKey");
var config_1 = __importDefault(require("../util/config"));
var logger_1 = __importDefault(require("../util/logger"));
var dic_1 = require("./../util/dic");
var tips_1 = __importDefault(require("../util/tips"));
var downloadTarget_1 = require("../model/downloadTarget");
var package_config = require(dic_1.ROOT_PACKAGE_PATH('package.json'));
/**
* 非空校验
*
* @param {(string )} val
*/
function validate(val) {
    var flag = true;
    if (!val.trim()) {
        flag = '不能为空';
    }
    return flag;
}
var prompt = /** @class */ (function () {
    function prompt() {
        var _this = this;
        this._jdoss_config = config_1.default.readUploadConfigFile();
        tips_1.default.print();
        var _a = this._jdoss_config, access = _a.access, secret = _a.secret;
        if (access && secret) {
            this.initCommand();
        }
        else {
            logger_1.default.info("\u9996\u6B21\u4F7F\u7528\uFF0C\u8BF7\u6309\u9700\u914D\u7F6E\u79D8\u94A5\uFF01");
            this.settingKey().then(function (res) {
                res && _this.initCommand();
            });
        }
    }
    /**
     * 初始化应用，引导用户本次使用
     */
    prompt.prototype.initCommand = function () {
        return __awaiter(this, void 0, void 0, function () {
            var self, command, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        self = this;
                        return [4 /*yield*/, inquirer.prompt([{
                                    type: 'rawlist',
                                    message: '请选择您要执行的命令:',
                                    name: 'command',
                                    choices: [
                                        {
                                            key: "upload",
                                            name: "执行上传",
                                            value: "upload",
                                        },
                                        {
                                            key: "download",
                                            name: "执行下载",
                                            value: "download"
                                        },
                                        {
                                            key: "setting",
                                            name: "设置 oss 应用秘钥",
                                            value: "setting"
                                        },
                                        {
                                            key: "init",
                                            name: "清空本地配置信息",
                                            value: "init"
                                        }
                                    ],
                                }])];
                    case 1:
                        command = (_b.sent()).command;
                        _a = command;
                        switch (_a) {
                            case "setting": return [3 /*break*/, 2];
                            case "upload": return [3 /*break*/, 4];
                            case "download": return [3 /*break*/, 5];
                            case "init": return [3 /*break*/, 6];
                        }
                        return [3 /*break*/, 8];
                    case 2: return [4 /*yield*/, self.settingKey()];
                    case 3:
                        (_b.sent()) && self.initCommand();
                        return [3 /*break*/, 8];
                    case 4:
                        self.upload();
                        return [3 /*break*/, 8];
                    case 5:
                        self.download();
                        return [3 /*break*/, 8];
                    case 6:
                        config_1.default.initUploadConfigFile();
                        logger_1.default.success('清空本地配置信息成功，请重新配置！');
                        return [4 /*yield*/, self.settingKey()];
                    case 7:
                        (_b.sent()) && self.initCommand();
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 设置应用秘钥
     */
    prompt.prototype.settingKey = function () {
        var self = this;
        return new Promise(function (resolve, reject) {
            inquirer.prompt([
                {
                    type: 'input',
                    name: 'access',
                    message: '请输入 http://oss.jd.com/user/glist 生成的 access key :',
                    default: self._jdoss_config.access,
                    validate: validate
                },
                {
                    type: 'input',
                    name: 'secret',
                    message: '请输入 http://oss.jd.com/user/glist 生成的 secret key :',
                    default: self._jdoss_config.secret,
                    validate: validate
                },
                {
                    type: 'rawlist',
                    name: 'site',
                    message: '请选择上传的域名:',
                    choices: [
                        {
                            name: "中国 storage.jd.local（内网）",
                            value: "storage.jd.local"
                        },
                        {
                            name: "印尼 storage-local.jd.id",
                            value: "storage-local.jd.id"
                        },
                        {
                            name: "泰国 storage.jd.th.local",
                            value: "storage.jd.th.local"
                        },
                        {
                            name: "测试 test.storage.jd.com",
                            value: "test.storage.jd.com"
                        },
                    ],
                }
            ]).then(function (res) {
                self._jdoss_config.access = res.access;
                self._jdoss_config.secret = res.secret;
                self._jdoss_config.site = res.site;
                config_1.default.saveFile(self._jdoss_config);
                resolve(true);
            });
        });
    };
    /**
     * 执行上传操作
     */
    prompt.prototype.upload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var self, queuePrompt, promptArray, res, _a, _uploadTarget, _ossKey, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        self = this;
                        queuePrompt = [];
                        this._jdoss_config.fileQueue.forEach(function (item, index) {
                            queuePrompt.push({
                                key: index,
                                name: "\u4E0A\u4F20 >> \u76EE\u6807\uFF1A" + item.bucket + "/" + item.folder + " \u672C\u5730\u8DEF\u5F84\uFF1A" + item.localFullPath,
                                value: index
                            });
                        });
                        promptArray = __spreadArrays(queuePrompt, [
                            {
                                key: "addQueue",
                                name: queuePrompt.length ? "新增上传路径" : "首次使用，新增上传路径",
                                value: "addQueue"
                            }
                        ]);
                        if (queuePrompt.length) {
                            promptArray.push({
                                key: "settingQueue",
                                name: "管理上传列表",
                                value: "settingQueue"
                            });
                        }
                        return [4 /*yield*/, inquirer.prompt([{
                                    type: 'rawlist',
                                    message: '请选择进行上传的目标:',
                                    name: 'command',
                                    choices: promptArray,
                                }])];
                    case 1:
                        res = _d.sent();
                        _a = res.command;
                        switch (_a) {
                            case "settingQueue": return [3 /*break*/, 2];
                            case "addQueue": return [3 /*break*/, 3];
                        }
                        return [3 /*break*/, 4];
                    case 2:
                        self.settingQueue();
                        return [3 /*break*/, 7];
                    case 3:
                        self.modifyUploadTarget('add').then(function () { return self.upload(); });
                        return [3 /*break*/, 7];
                    case 4:
                        _uploadTarget = self._jdoss_config.fileQueue[res.command];
                        _ossKey = new ossKey_1.ossKey();
                        _ossKey.access = self._jdoss_config.access;
                        _ossKey.secret = self._jdoss_config.secret;
                        if (self._jdoss_config.site)
                            _ossKey.site = self._jdoss_config.site;
                        // _ossKey.useHttps = await self.promptConfirm('本次上传是否需要支持 https');
                        _b = _uploadTarget;
                        return [4 /*yield*/, self.promptConfirm('本次上传是否覆盖远程文件')];
                    case 5:
                        // _ossKey.useHttps = await self.promptConfirm('本次上传是否需要支持 https');
                        _b.cover = _d.sent();
                        _c = _uploadTarget;
                        return [4 /*yield*/, self.promptConfirm('本次上传是否需要手动刷新 CDN 缓存')];
                    case 6:
                        _c.printCdnFile = _d.sent();
                        new oss_1.default(_ossKey).upload(_uploadTarget);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 执行下载操作
     */
    prompt.prototype.download = function () {
        return __awaiter(this, void 0, void 0, function () {
            var self, downlistPrompt, _ossKey, _oss, bucketListRes, bucket;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        self = this;
                        downlistPrompt = [];
                        _ossKey = new ossKey_1.ossKey();
                        _ossKey.access = self._jdoss_config.access;
                        _ossKey.secret = self._jdoss_config.secret;
                        _oss = new oss_1.default(_ossKey);
                        return [4 /*yield*/, _oss.getBucketList()];
                    case 1:
                        bucketListRes = _a.sent();
                        bucketListRes.state && bucketListRes.bucketList.forEach(function (item, index) {
                            downlistPrompt.push({
                                key: index,
                                name: "\u7A7A\u95F4\u5217\u8868 bucket \u540D\u79F0\uFF1A" + item.Name,
                                value: item.Name
                            });
                        });
                        downlistPrompt.push({
                            key: 'back',
                            name: "返回上级菜单",
                            value: 'back'
                        });
                        return [4 /*yield*/, inquirer.prompt([{
                                    type: 'rawlist',
                                    message: '下载空间:',
                                    name: 'bucket',
                                    choices: downlistPrompt,
                                }])];
                    case 2:
                        bucket = (_a.sent()).bucket;
                        switch (bucket) {
                            case "back":
                                self.initCommand();
                                break;
                            default:
                                inquirer.prompt([
                                    {
                                        type: 'input',
                                        name: 'download_path',
                                        message: '请输入本地存储路径',
                                        default: '',
                                        validate: validate
                                    }
                                ]).then(function (_a) {
                                    var download_path = _a.download_path;
                                    var _downloadTarget = new downloadTarget_1.downloadTarget();
                                    _downloadTarget.bucket = bucket;
                                    _downloadTarget.downloadLocalFullPath = download_path;
                                    _oss.dowload(_downloadTarget);
                                });
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     *
     * 提示询问框
     * @param {string} msg
     * @returns {Promise<boolean>}
     * @memberof prompt
     */
    prompt.prototype.promptConfirm = function (msg) {
        return new Promise(function (resolve, reject) {
            inquirer.prompt([{
                    type: 'confirm',
                    message: msg,
                    name: 'confirm',
                }]).then(function (res) {
                resolve(res.confirm);
            });
        });
    };
    /**
     * 管理本地上传队列
     *
     */
    prompt.prototype.settingQueue = function () {
        return __awaiter(this, void 0, void 0, function () {
            var self, queuePrompt, command, _uploadTarget;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        self = this;
                        queuePrompt = [];
                        self._jdoss_config.fileQueue.forEach(function (item, index) {
                            queuePrompt.push({
                                key: index,
                                name: "\u76EE\u6807\uFF1A" + item.bucket + "/" + item.folder + " \u672C\u5730\u8DEF\u5F84\uFF1A" + item.localFullPath,
                                value: index
                            });
                        });
                        queuePrompt.push({
                            key: 'back',
                            name: "返回上级菜单",
                            value: 'back'
                        });
                        return [4 /*yield*/, inquirer.prompt([{
                                    type: 'rawlist',
                                    message: '请选择处理目标（修改/删除）:',
                                    name: 'command',
                                    choices: queuePrompt,
                                }])];
                    case 1:
                        command = (_a.sent()).command;
                        switch (command) {
                            case "back":
                                self.upload();
                                break;
                            default:
                                _uploadTarget = self._jdoss_config.fileQueue[command];
                                self.actionUploadTarget(_uploadTarget);
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     *
     * 修改上传对象信息
     * @param {uploadTarget} _uploadTarget
     * @memberof prompt
     */
    prompt.prototype.actionUploadTarget = function (_uploadTarget) {
        return __awaiter(this, void 0, void 0, function () {
            var self, str, command, cacheFiles, index;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        self = this;
                        str = "\u76EE\u6807\uFF1A" + _uploadTarget.bucket + "/" + _uploadTarget.folder + " \u672C\u5730\u8DEF\u5F84\uFF1A" + _uploadTarget.localFullPath;
                        return [4 /*yield*/, inquirer.prompt([{
                                    type: 'list',
                                    message: '请选择您要进行的操作（修改/删除）:',
                                    name: 'command',
                                    choices: [
                                        {
                                            key: "modify",
                                            name: "修改" + str,
                                            value: "modify"
                                        },
                                        {
                                            key: "delete",
                                            name: "删除" + str,
                                            value: "delete"
                                        },
                                        {
                                            key: 'back',
                                            name: "返回上级菜单",
                                            value: 'back'
                                        }
                                    ],
                                }])];
                    case 1:
                        command = (_a.sent()).command;
                        switch (command) {
                            case "back":
                                self.settingQueue();
                                break;
                            case "modify":
                                self.modifyUploadTarget('modify', _uploadTarget).then(function () { return self.settingQueue(); });
                                break;
                            case "delete":
                                cacheFiles = self._jdoss_config.fileQueue;
                                index = cacheFiles.findIndex(function (item) { return item._id === _uploadTarget._id; });
                                if (index != -1) {
                                    cacheFiles.splice(index, 1);
                                    self._jdoss_config.fileQueue = cacheFiles;
                                    config_1.default.saveFile(self._jdoss_config).then(function () { return self.settingQueue(); });
                                }
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     *
     * * 新增/修改 上传对象
     * @param {string} [type="modify|add"]
     * @param {uploadTarget} _uploadTarget
     * @returns {Promise<boolean>}
     */
    prompt.prototype.modifyUploadTarget = function (type, _uploadTarget) {
        if (type === void 0) { type = "modify"; }
        var self = this;
        return new Promise(function (resolve, reject) {
            inquirer.prompt([
                {
                    type: 'input',
                    name: 'bucket',
                    default: type == "modify" ? _uploadTarget === null || _uploadTarget === void 0 ? void 0 : _uploadTarget.bucket : '',
                    message: '请输入远程 oss bucket 空间名称 :',
                    validate: validate
                },
                {
                    type: 'input',
                    name: 'folder',
                    default: type == "modify" ? _uploadTarget === null || _uploadTarget === void 0 ? void 0 : _uploadTarget.folder : '',
                    message: '请输入远程 oss folder 空间文件夹名称 :',
                },
                {
                    type: 'input',
                    name: 'localFullPath',
                    default: type == "modify" ? _uploadTarget === null || _uploadTarget === void 0 ? void 0 : _uploadTarget.localFullPath : '',
                    message: '请输入本地 被上传文件夹绝对路径 :',
                    validate: validate
                },
            ]).then(function (res) {
                var _a, _b, _c;
                res.folder = (_a = res.folder) === null || _a === void 0 ? void 0 : _a.trim();
                res.folder = oss_2.trimChar(res.folder, '/', 'left');
                res.bucket = (_b = res.bucket) === null || _b === void 0 ? void 0 : _b.trim();
                res.localFullPath = (_c = res.localFullPath) === null || _c === void 0 ? void 0 : _c.trim();
                if (type == 'add') {
                    res._id = Math.random().toString(36).slice(-8);
                    self._jdoss_config.fileQueue.push(res);
                }
                else {
                    res._id = _uploadTarget === null || _uploadTarget === void 0 ? void 0 : _uploadTarget._id;
                    var cacheFiles = self._jdoss_config.fileQueue;
                    var index = cacheFiles.findIndex(function (item) { return item._id === res._id; });
                    if (index != -1) {
                        cacheFiles[index] = res;
                        self._jdoss_config.fileQueue = cacheFiles;
                    }
                }
                config_1.default.saveFile(self._jdoss_config).then(resolve);
            });
        });
    };
    return prompt;
}());
exports.default = prompt;

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.trimChar = void 0;
/*
 * @Author: zhuzhida
 * @Date: 2020-07-20 13:22:52
 * @Last Modified by: zhuzhida
 * @Last Modified time: 2021-08-19 14:59:14
 */
var logger_1 = __importDefault(require("../util/logger"));
var uploadTarget_1 = require("../model/uploadTarget");
var downloadTarget_1 = require("../model/downloadTarget");
var config_1 = __importDefault(require("../util/config"));
var dic_1 = require("./../util/dic");
var Jss = require("@jd/jmfe-node-jss");
var glob = require("glob");
var fs = require("fs");
/**
 * 删除字符串首尾指定字符
 * @param str 要处理的字符串
 * @param char 去除的指定字符
 * @param type 类型，右边或左边，为空是替换首尾
 * @returns {*}
 */
function trimChar(str, char, type) {
    if (!str) {
        str = "";
    }
    ;
    if (char) {
        if (type == "left") {
            return str.replace(new RegExp("^\\" + char + "+", "g"), "");
        }
        else if (type == "right") {
            return str.replace(new RegExp("\\" + char + "+$", "g"), "");
        }
        return str.replace(new RegExp("^\\" + char + "+|\\" + char + "+$", "g"), "");
    }
    return str.replace(/^\s+|\s+$/g, "");
}
exports.trimChar = trimChar;
var oss = /** @class */ (function () {
    function oss(_ossKey) {
        this.cdnFile = [];
        this._uploadTarget = new uploadTarget_1.uploadTarget();
        this._downloadTarget = new downloadTarget_1.downloadTarget();
        this.jss = new Jss(_ossKey.site, _ossKey.access, _ossKey.secret, false);
        this.ossInfo = _ossKey;
        if (this.checkSite()) {
            this.getBucketList().then(function (res) {
                res.state
                    ? logger_1.default.success("oss 连接成功!")
                    : logger_1.default.error("oss 连接失败，请检查 access secret 值，及当前网络是否为公司内网！");
            });
        }
    }
    oss.prototype.checkSite = function () {
        if (this.ossInfo.site == "storage.jd.com" || this.ossInfo.site == "storage.jd.id" || this.ossInfo.site == "storage.jd.co.th") {
            return false;
        }
        else {
            return true;
        }
    };
    /**
     * 执行上传
     * @param {uploadTarget} _uploadTarget
     * @memberof oss
     */
    oss.prototype.upload = function (_uploadTarget) {
        var _this = this;
        if (!this.checkSite()) {
            logger_1.default.error("oss 连接失败，按照安全部规范要求，请更改对应站点的文件上传域名");
            return false;
        }
        logger_1.default.success("开始执行上传任务...");
        this._uploadTarget = _uploadTarget;
        this.makeAssetsMap(_uploadTarget.localFullPath, _uploadTarget.ignoreRegexp).then(function (res) {
            return _this.uploadFile(res);
        });
    };
    /**
     * 执行下载
     * @param {downloadTarget} _downloadTarget
     * @memberof oss
     */
    oss.prototype.dowload = function (_downloadTarget) {
        logger_1.default.success("开始执行下载任务...");
        this._downloadTarget = _downloadTarget;
        var bucket = this.jss.bucket(_downloadTarget.bucket);
        this.downLoadOriginBucket(bucket);
    };
    /**
     * 获取空间列表
     * @returns {Promise<BucketListRes>}
     * @memberof oss
     */
    oss.prototype.getBucketList = function () {
        var _this = this;
        return new Promise(function (resolve, rejects) {
            var bucketListRes = new BucketListRes();
            try {
                _this.jss
                    .listBucket()
                    .then(function (res) {
                    var Buckets = JSON.parse(res).Buckets;
                    bucketListRes.state = true;
                    bucketListRes.bucketList = Buckets;
                    resolve(bucketListRes);
                })
                    .catch(function (error) {
                    bucketListRes.state = false;
                    logger_1.default.error(error);
                });
            }
            catch (e) {
                bucketListRes.state = false;
                resolve(bucketListRes);
            }
        });
    };
    /**
     * 检查空间，是否存在，不存在则创建
     * @returns {Promise<boolean>}
     * @memberof oss
     */
    oss.prototype.checkObjectList = function (bucket) {
        return new Promise(function (resolve, rejects) {
            // 默认最大值1000
            bucket
                .listObject(undefined, undefined, "", undefined)
                .then(function (res) {
                resolve(true);
            })
                .catch(function (error) {
                // 当前没有对应空间，则新建一个
                bucket
                    .create()
                    .then(function () {
                    logger_1.default.success("\u65B0\u5EFA bucket " + bucket.name + " \u6210\u529F");
                    bucket
                        .acl()
                        .internetVisible(true)
                        .allowAnyoneRead()
                        .set()
                        .then(function (res) {
                        logger_1.default.success("\u6743\u9650\u8BBE\u7F6E bucket " + bucket.name + " \u6210\u529F");
                        resolve(true);
                    })
                        .catch(function () {
                        resolve(false);
                        logger_1.default.error("\u6743\u9650\u8BBE\u7F6E bucket  " + bucket.name + " \u5931\u8D25\uFF1A", error);
                    });
                })
                    .catch(function () {
                    resolve(false);
                    logger_1.default.error("\u65B0\u5EFA bucket  " + bucket.name + " \u5931\u8D25\uFF1A", error);
                });
            });
        });
    };
    /**
     *
     * 匹配本地文件
     * @param {string} dir
     * @param {string} ignoreRegexp
     * @memberof oss
     */
    oss.prototype.makeAssetsMap = function (dir, ignoreRegexp) {
        var _this = this;
        if (!dir || !dir.replace(/^\//, "").length) {
            logger_1.default.error("目录名的参数无效");
        }
        return new Promise(function (resolve, rejects) {
            try {
                logger_1.default.success("开始 匹配静态资源... 请耐心等待!");
                var stat = fs.statSync(dir);
                var filelist = [];
                if (stat.isFile()) {
                    var fileFullPath = dir;
                    var _uploadOssTarget = new UploadOssTarget();
                    _uploadOssTarget.localFullPath = fileFullPath;
                    _uploadOssTarget.targetPath = "/" + fileFullPath.substring(fileFullPath.lastIndexOf("/") + 1);
                    if (!_this._uploadTarget.folder) {
                        _uploadOssTarget.targetPath = _uploadOssTarget.targetPath.replace("/", "");
                    }
                    filelist.push(_uploadOssTarget);
                }
                else {
                    filelist = glob
                        .sync(dir + "/**", {
                        dot: true,
                    })
                        .filter(function (file) {
                        var test = true;
                        if (ignoreRegexp) {
                            test = !new RegExp(ignoreRegexp).test(file);
                        }
                        var stat = fs.statSync(file);
                        return test && stat.isFile();
                    })
                        .map(function (file) {
                        var _uploadOssTarget = new UploadOssTarget();
                        _uploadOssTarget.localFullPath = file;
                        _uploadOssTarget.targetPath = file
                            .replace(/\\/g, "/")
                            .replace(dir.replace(/\\/g, "/"), "");
                        if (!_this._uploadTarget.folder) {
                            _uploadOssTarget.targetPath = _uploadOssTarget.targetPath.replace("/", "");
                        }
                        return _uploadOssTarget;
                    });
                }
                resolve(filelist);
            }
            catch (e) {
                rejects(e);
            }
        });
    };
    /**
     * 上传文件
     *
     * @param {UploadOssTarget[]} filelist 待上传文件数组
     * @returns
     * @memberof oss
     */
    oss.prototype.uploadFile = function (filelist) {
        return __awaiter(this, void 0, void 0, function () {
            var _self, bucket, currentSuccessNumber, successNumber, errorFiles, noUploadFiles, that, PromisePushs;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _self = this;
                        if (!filelist.length) {
                            logger_1.default.warn("\u8BF7\u68C0\u67E5\u60A8\u7684\u4E0A\u4F20\u76EE\u5F55 " + this._uploadTarget.localFullPath + " \uFF0C\u5F53\u524D\u672A\u627E\u5230\u6587\u4EF6\u53EF\u4E0A\u4F20\uFF01");
                            return [2 /*return*/];
                        }
                        bucket = this.jss.bucket(this._uploadTarget.bucket);
                        return [4 /*yield*/, this.checkObjectList(bucket)];
                    case 1:
                        if (!(_a.sent())) {
                            return [2 /*return*/];
                        }
                        if (_self._uploadTarget.uploadStart) {
                            _self._uploadTarget.uploadStart(filelist);
                        }
                        currentSuccessNumber = 0;
                        successNumber = 0, errorFiles = [], noUploadFiles = [];
                        that = this;
                        PromisePushs = [];
                        filelist.forEach(function (file, index) {
                            PromisePushs.push(function () {
                                return new Promise(function (_resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                                    var folder, publishFilePath;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                folder = trimChar(that._uploadTarget.folder, "/", 'left');
                                                publishFilePath = "" + folder + file.targetPath;
                                                // let publishFilePath = `${this._uploadTarget.folder}${file.targetPath}`;
                                                // logger.info("开始上传" + file.localFullPath);
                                                // logger.info("发布路径" + publishFilePath);
                                                filelist[index].remoteUrl = bucket.client.baseUrl + "/" + bucket.name + "/" + publishFilePath;
                                                if (!!that._uploadTarget.cover) return [3 /*break*/, 2];
                                                return [4 /*yield*/, bucket.object(publishFilePath).exist()];
                                            case 1:
                                                if (_a.sent()) {
                                                    // logger.warn(`远程文件已存在跳过上传 >> ${file.localFullPath}`);
                                                    noUploadFiles.push(file.localFullPath);
                                                    _resolve(true);
                                                    return [2 /*return*/];
                                                }
                                                _a.label = 2;
                                            case 2:
                                                bucket
                                                    .object(publishFilePath)
                                                    .put(file.localFullPath)
                                                    .then(function (res) {
                                                    currentSuccessNumber++;
                                                    successNumber++;
                                                    var percentage = ((currentSuccessNumber / filelist.length) *
                                                        100).toFixed(0);
                                                    logger_1.default.success({
                                                        prefix: "[task" + successNumber + "] " + percentage + "%",
                                                        message: bucket.client.baseUrl + "/" + bucket.name + "/" + publishFilePath + " \u4E0A\u4F20\u6210\u529F",
                                                    });
                                                    if (_self._uploadTarget.uploadProgress) {
                                                        _self._uploadTarget.uploadProgress(percentage);
                                                    }
                                                    _self.cdnFile.push("//storage.360buyimg.com/" + bucket.name + "/" + publishFilePath);
                                                    _resolve(true);
                                                })
                                                    .catch(function (err) {
                                                    currentSuccessNumber++;
                                                    logger_1.default.error("\u4E0A\u4F20\u51FA\u9519\u5566 >> " + file.localFullPath);
                                                    errorFiles.push(file.localFullPath);
                                                    _resolve(true);
                                                });
                                                return [2 /*return*/];
                                        }
                                    });
                                }); });
                            });
                        });
                        PromisePushs.reduce(function (promise, item) {
                            return promise.then(function () { return item(); });
                        }, Promise.resolve()).then(function (res) {
                            if (errorFiles.length) {
                                logger_1.default.error("\u5931\u8D25\u6587\u4EF6", errorFiles);
                                logger_1.default.error("\u8BF7\u68C0\u67E5\u6587\u4EF6\u540D\u79F0\u89C4\u5219:\n          1\u3001\u53EA\u80FD\u7531\u5B57\u6BCD\u3001\u6570\u5B57\u3001\u4E0B\u5212\u7EBF\uFF08_\uFF09\u3001\u4E2D\u5212\u7EBF(-)\u3001\u4E2D\u6587\u3001\u76EE\u5F55\u5206\u9694\u7B26\uFF08/\uFF09\u4EE5\u53CA\u70B9\u53F7(.)\u7EC4\u6210\n          2\u3001\u957F\u5EA6\u5FC5\u987B\u57281-100\u4E4B\u95F4\n          3\u3001\u4E0D\u80FD\u4EE5\"/\"\u5F00\u5934,\u4E0D\u80FD\u5305\u542B\u8FDE\u7EED\u7684//\n        ");
                            }
                            if (noUploadFiles.length) {
                                logger_1.default.warn("\u672A\u4E0A\u4F20\u6587\u4EF6 > ", noUploadFiles);
                                logger_1.default.warn("\u672C\u6B21\u91C7\u7528\u975E\u8986\u76D6\u6A21\u5F0F\uFF0C\u8FDC\u7A0B\u76EE\u5F55\u5DF2\u5B58\u5728\uFF0C\u8DF3\u8FC7\u4E0A\u4F20\uFF01");
                            }
                            logger_1.default.success("\u672C\u6B21\u4E0A\u4F20\u4EFB\u52A1\u5B8C\u6210 \u603B\u8BA1" + filelist.length + "\u4E2A  \u6210\u529F" + successNumber + " \u672A\u4E0A\u4F20" + noUploadFiles.length + " \u5931\u8D25" + errorFiles.length);
                            if (_self._uploadTarget.uploadEnd) {
                                _self._uploadTarget.uploadEnd({
                                    filelist: filelist,
                                    count: filelist.length,
                                    successNumber: successNumber,
                                    errorFiles: errorFiles.length,
                                    noUploadFiles: noUploadFiles.length,
                                });
                            }
                            if (_self._uploadTarget.printCdnFile) {
                                _self.printCdnFile(_self._uploadTarget);
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 删除远程空间内容
     * @param {*} bucket
     * @returns {Promise<boolean>}
     * @memberof oss
     */
    oss.prototype.deleteOriginBucket = function (bucket) {
        var _this = this;
        return new Promise(function (resolve, rejects) {
            try {
                // 默认最大值1000
                bucket
                    .listObject(undefined, undefined, "", undefined)
                    .then(function (res) {
                    var PromiseDeletes = [];
                    var Contents = JSON.parse(res).Contents;
                    Contents.forEach(function (element) {
                        PromiseDeletes.push(new Promise(function (_resolve, reject) {
                            if (!_this._uploadTarget.folder ||
                                element.Key.split("/")[0] === _this._uploadTarget.folder) {
                                bucket
                                    .object(element.Key)
                                    .delete()
                                    .then(function (res) {
                                    logger_1.default.success(element.Key + " \u5220\u9664\u6210\u529F");
                                    _resolve(true);
                                })
                                    .catch(function (error) {
                                    logger_1.default.error(element.Key + " \u5220\u9664\u51FA\u9519\u5566", error);
                                    _resolve(true);
                                });
                            }
                            else {
                                // logger.warn(`当前模式下只删除配置项 文件夹 ${this._uploadTarget.folder} 的内容，已取消删除${element.Key}`);
                                _resolve(true);
                            }
                        }));
                    });
                    Promise.all(PromiseDeletes).then(function (res) {
                        resolve(true);
                    });
                })
                    .catch(function (error) {
                    // 当前没有对应空间，则新建一个
                    bucket
                        .create()
                        .then(function () {
                        logger_1.default.success("\u65B0\u5EFA bucket " + bucket.name + " \u6210\u529F");
                        bucket
                            .acl()
                            .internetVisible(true)
                            .allowAnyoneRead()
                            .set()
                            .then(function (res) {
                            logger_1.default.success("\u6743\u9650\u8BBE\u7F6E bucket " + bucket.name + " \u6210\u529F");
                            resolve(true);
                        })
                            .catch(function () {
                            resolve(false);
                            logger_1.default.error("\u6743\u9650\u8BBE\u7F6E bucket  " + bucket.name + " \u5931\u8D25\uFF1A", error);
                        });
                    })
                        .catch(function () {
                        resolve(false);
                        logger_1.default.error("\u65B0\u5EFA bucket  " + bucket.name + " \u5931\u8D25\uFF1A", error);
                    });
                });
            }
            catch (e) {
                rejects(e);
            }
        });
    };
    /**
     * 下载远程空间文件
     * @param {*} bucket
     * @returns {Promise<boolean>}
     * @memberof oss
     */
    oss.prototype.downLoadOriginBucket = function (bucket) {
        var _this = this;
        var _self = this;
        return new Promise(function (resolve, rejects) {
            try {
                // 默认最大值1000
                bucket
                    .listObject(undefined, undefined, "", undefined)
                    .then(function (res) {
                    var PromiseDownloads = [];
                    var currentSuccessNumber = 0;
                    var successNumber = 0, errorFiles = [];
                    var Contents = JSON.parse(res).Contents;
                    if (_self._downloadTarget.downloadStart) {
                        _self._downloadTarget.downloadStart(Contents);
                    }
                    var _loop_1 = function (index) {
                        var element = Contents[index];
                        var folder = trimChar(_this._downloadTarget.folder, "/");
                        if (folder && !element.Key.includes(folder)) {
                            currentSuccessNumber++;
                            return "continue";
                        }
                        PromiseDownloads.push(function () {
                            return new Promise(function (_resolve, reject) {
                                var downloadLocalFullPath = _this._downloadTarget.downloadLocalFullPath + "/" + _this._downloadTarget.bucket + "/" + element.Key;
                                if (_this._downloadTarget.remoteFolder == false) {
                                    var splits = element.Key.split('/');
                                    var filename = splits[splits.length - 1];
                                    downloadLocalFullPath = _this._downloadTarget.downloadLocalFullPath + "/" + filename;
                                }
                                // config.checkFile(downloadLocalFullPath).then((res) => {
                                bucket.object(element.Key).saveToFile({
                                    targetPath: downloadLocalFullPath,
                                    finishCb: function (err, contentLength) {
                                        if (err) {
                                            errorFiles.push(element.Key);
                                            logger_1.default.error(element.Key + " \u4E0B\u8F7D\u51FA\u9519\u5566", err);
                                            _resolve(true);
                                            return;
                                        }
                                        currentSuccessNumber++;
                                        successNumber++;
                                        var percentage = ((successNumber / PromiseDownloads.length) *
                                            100).toFixed(0);
                                        logger_1.default.success({
                                            prefix: "[task" + successNumber + "] " + percentage + "%",
                                            message: downloadLocalFullPath + " \u4E0B\u8F7D\u6210\u529F \u6587\u4EF6\u5927\u5C0F\uFF1A" + (contentLength / 1024).toFixed(0) + " kb",
                                        });
                                        if (_self._downloadTarget.downloadProgress) {
                                            _self._downloadTarget.downloadProgress(percentage);
                                        }
                                        _resolve(true);
                                    },
                                    progressCb: function (progressInfo) {
                                        var runtime = progressInfo.runtime, percentage = progressInfo.percentage;
                                        if (runtime > 3) {
                                            logger_1.default.info("\u5927\u578B\u6587\u4EF6\u4E0B\u8F7D\u4E2D\uFF1A\u65F6\u95F4" + runtime + "\u79D2\uFF0C\u8FDB\u5EA6" + percentage.toFixed(0) + "%");
                                        }
                                    },
                                    throttleInterval: 1000,
                                });
                            });
                            // })
                        });
                    };
                    for (var index = 0; index < Contents.length; index++) {
                        _loop_1(index);
                    }
                    PromiseDownloads.reduce(function (totel, item, currentIndex, arr) {
                        return totel.then(function () { return item(); });
                    }, Promise.resolve()).then(function () {
                        if (errorFiles.length) {
                            logger_1.default.error("\u5931\u8D25\u6587\u4EF6", errorFiles);
                        }
                        logger_1.default.success("\u672C\u6B21\u4E0B\u8F7D\u4EFB\u52A1\u5B8C\u6210 \u603B\u8BA1" + PromiseDownloads.length + "\u4E2A  \u6210\u529F" + successNumber + " \u5931\u8D25" + errorFiles.length);
                        if (_self._downloadTarget.downloadEnd) {
                            _self._downloadTarget.downloadEnd({
                                filelist: Contents,
                                count: Contents.length,
                                successNumber: successNumber,
                                errorFiles: errorFiles.length
                            });
                        }
                    });
                })
                    .catch(function (error) {
                    logger_1.default.error("\u672A\u627E\u5230 bucket  " + bucket.name, error);
                    resolve(false);
                });
            }
            catch (e) {
                rejects(e);
            }
        });
    };
    /**
     * 下载cdn文件
     * @param {*} bucket
     * @returns {Promise<boolean>}
     * @memberof oss
     */
    oss.prototype.printCdnFile = function (_uploadTarget) {
        var _self = this;
        _self.cdnFile.unshift("\n此文件为刷新 CDN 缓存使用，请复制下方链接到 http://np.jd.com/Admin/Index/frame/alias/cache-clear 进行手动刷新缓存。\n");
        var time = new Date();
        var cdnFileName = dic_1.ROOT_PACKAGE_PATH("cdn-" + _uploadTarget.bucket + "_" + new Date().getTime() + ".log");
        config_1.default.checkFile(cdnFileName).then(function (res) {
            fs.writeFile(cdnFileName, _self.cdnFile.join("\n"), function (err) {
                if (err) {
                    logger_1.default.error(err);
                }
                else {
                    logger_1.default.success("\u624B\u52A8\u5237\u65B0 CDN \u6587\u4EF6\u5730\u5740\u4E0B\u8F7D\u6210\u529F " + cdnFileName);
                    logger_1.default.success("\u8BF7\u6253\u5F00\u6587\u4EF6\u590D\u5236\u5185\u5BB9\u5230 http://np.jd.com/Admin/Index/frame/alias/cache-clear \u8FDB\u884C\u624B\u52A8\u5237\u65B0\u7F13\u5B58\u3002");
                }
            });
        });
    };
    return oss;
}());
var BucketListRes = /** @class */ (function () {
    function BucketListRes() {
        this.state = false;
        this.bucketList = [];
    }
    return BucketListRes;
}());
var UploadOssTarget = /** @class */ (function () {
    function UploadOssTarget() {
    }
    return UploadOssTarget;
}());
exports.default = oss;

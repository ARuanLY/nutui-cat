{"remainingRequest":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/index.js!/Users/ailu/Documents/program/nutui-lu/nutui-cat/loader/md-vue/index.js!/Users/ailu/Documents/program/nutui-lu/nutui-cat/src/packages/video/doc.md?vue&type=template&id=4acfdee2&","dependencies":[{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/src/packages/video/doc.md","mtime":1631157959401},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/loader/md-vue/index.js","mtime":1622707954407}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
{"remainingRequest":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ailu/Documents/program/nutui-lu/nutui-cat/src/packages/arcrolling/index.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/src/packages/arcrolling/index.vue","mtime":1626694613213},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgJ2luZGV4LnNjc3MnOwo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiPA","file":"index.vue","sourceRoot":"src/packages/arcrolling","sourcesContent":["<template>\n  <div class=\"nutcat-arcrolling-page\">\n    <div\n      :class=\"\n        directionType == 'vertical'\n          ? 'star-person-list-v'\n          : 'star-person-list-h'\n      \"\n    >\n      <div\n        class=\"swiper-wrapper\"\n        :class=\"\n          directionType == 'vertical' ? ' star-wrapper-v' : 'star-wrapper-h'\n        \"\n        ref=\"starWrapper\"\n        v-if=\"starList.length\"\n      >\n        <div\n          class=\"swiper-slide star-item\"\n          v-for=\"(item, index) of starList\"\n          :key=\"'huxing' + index\"\n        >\n          <div class=\"star-box\">\n            <img :src=\"item.pictureUrl\" class=\"star_head\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { createComponent } from '@/utils/create';\nconst { componentName, create } = createComponent('arcrolling');\nimport Swiper from '../utils/swiper';\n\nexport default create({\n  props: {\n    list: {\n      type: Array,\n      default: []\n    },\n    leftDistance: {\n      type: Array,\n      default: ['210', '280', '410']\n    },\n    directionType: {\n      type: String,\n      default: 'vertical'\n    }\n  },\n  watch: {\n    list: {\n      handler(val) {\n        (this as any).starList = val;\n        (this as any).initSwiperStar();\n      },\n      deep: true\n    }\n  },\n  data() {\n    return {\n      swiperStarHot: null,\n      starList: []\n    };\n  },\n  components: {},\n  computed: {\n    classes() {\n      return {\n        [componentName + '-page']: true\n      };\n    }\n  },\n  mounted() {\n    this.initSwiperStar();\n  },\n  methods: {\n    initSwiperStar() {\n      let that: any = this;\n      if (that.starList.length == 0) {\n        return;\n      }\n      if (that.directionType == 'horizontal') {\n        that.swiperStarHot = Swiper('.star-person-list-h', {\n          effect: 'coverflow',\n          grabCursor: true,\n          centeredSlides: true,\n          slidesPerView: 'auto',\n          observer: true, //修改swiper自己或子元素时，自动初始化swiper\n          observeParents: true, //修改swiper的父元素时，自动初始化swiper\n          slideToClickedSlide: true, // 点击过渡到该slide\n          spaceBetween: 10,\n          coverflowEffect: {\n            rotate: 0, //slide做3d旋转时Y轴的旋转角度。默认50。\n            stretch: 1, //每个slide之间的拉伸值（距离），越大slide靠得越紧。 默认0。\n            depth: 130, //slide的位置深度。值越大z轴距离越远，看起来越小。 默认100。\n            modifier: 1, //depth和rotate和stretch的倍率，相当于depth*modifier、rotate*modifier、stretch*modifier，值越大这三个参数的效果越明显。默认1。\n            slideShadows: false //开启slide阴影。默认 true。\n          },\n          speed: 1000,\n          loop: true,\n          autoplay: {\n            delay: 2000,\n            stopOnLastSlide: false, // 切换到最后一个时不停止\n            disableOnInteraction: false //用户操作swiper之后 不停止autoplay\n          },\n          on: {\n            init() {\n              let _index = (this as any).activeIndex;\n              that.getRealList(_index);\n            },\n            slideChange() {\n              let _index = (this as any).activeIndex;\n              that.getRealList(_index);\n            },\n            touchEnd: function(swiper: any) {\n              that.$emit('callback', swiper);\n            },\n            onSlideChangeEnd: function(swiper: any) {\n              swiper.update();\n            }\n          }\n        });\n      } else {\n        that.swiperStarHot = Swiper('.star-person-list-v', {\n          direction: 'vertical',\n          loop: true, // 是否循环\n          loopAdditionalSlides: 3,\n          loopedSlides: 5,\n          slidesPerView: 'auto', // 同时显示多少个\n          slideToClickedSlide: true, // 点击过渡到该slide\n          spaceBetween: 30,\n          // autoplay: {\n          //   delay: 3000,\n          //   stopOnLastSlide: false, // 切换到最后一个时不停止\n          //   disableOnInteraction: false //用户操作swiper之后 不停止autoplay\n          // },\n          // enteredSlides: true,\n          centeredSlides: true,\n          grabCursor: true,\n          observer: true, //修改swiper自己或子元素时，自动初始化swiper\n          observeParents: true, //修改swiper的父元素时，自动初始化swiper\n          freeMode: false,\n          freeModeMomentum: false, // 取消惯性\n          effect: 'coverflow',\n          coverflowEffect: {\n            rotate: 0, //slide做3d旋转时Y轴的旋转角度。默认50。\n            stretch: 0, //每个slide之间的拉伸值（距离），越大slide靠得越紧。 默认0。\n            depth: 300, //slide的位置深度。值越大z轴距离越远，看起来越小。 默认100。\n            modifier: 1, //depth和rotate和stretch的倍率，相当于depth*modifier、rotate*modifier、stretch*modifier，值越大这三个参数的效果越明显。默认1。\n            slideShadows: false //开启slide阴影。默认 true。\n          },\n          on: {\n            init() {\n              let _index = (this as any).activeIndex;\n              that.setPrevSize(_index);\n            },\n            slideChange() {\n              let _index = (this as any).activeIndex;\n              that.setPrevSize(_index);\n            },\n            touchEnd: function(swiper: any) {\n              that.$emit('callback', swiper);\n            },\n            onSlideChangeEnd: function(swiper: any) {\n              swiper.update();\n            }\n          }\n        });\n      }\n    },\n    setPrevSize(midIndex: number) {\n      const that: any = this;\n      const realList = [\n        midIndex - 2,\n        midIndex - 1,\n        midIndex,\n        midIndex + 1,\n        midIndex + 2\n      ];\n      const realListStartIndex = realList[0];\n      const realListendIndex = realList[realList.length - 1];\n      const children = (this as any).$refs.starWrapper.children;\n      children.forEach((element: any, idx: number) => {\n        if (children[idx]) {\n          if (idx < realListStartIndex || idx > realListendIndex) {\n            children[idx].style.left = '1000px';\n            element.style.visibility = 'hidden';\n          }\n        }\n      });\n      realList.forEach((idx: number) => {\n        if (children[idx]) {\n          if (Math.abs(idx - midIndex) == 1) {\n            children[idx].style.left = `${that.leftDistance[1] + 'px'}`;\n          } else if (Math.abs(idx - midIndex) == 2) {\n            children[idx].style.left = `${that.leftDistance[2] + 'px'}`;\n          } else {\n            children[idx].style.left = `${that.leftDistance[0] + 'px'}`;\n          }\n          children[idx].style.visibility = 'visible';\n        }\n      });\n    },\n    getRealList(midIndex: number) {\n      // 屏幕上能看见的图片的索引\n      const realList = [\n        midIndex - 4,\n        midIndex - 3,\n        midIndex - 2,\n        midIndex - 1,\n        midIndex,\n        midIndex + 1,\n        midIndex + 2,\n        midIndex + 3,\n        midIndex + 4\n      ];\n      const realListStartIndex = realList[0];\n      const realListendIndex = realList[realList.length - 1];\n      const children = (this as any).$refs.starWrapper.children;\n      realList.forEach((idx: number) => {\n        if (idx < midIndex) {\n          children[idx].style.top = `-${Math.pow(2, midIndex - idx) * 10}px`;\n        } else if (idx > midIndex) {\n          children[idx].style.top = `-${Math.pow(2, idx - midIndex) * 10}px`;\n        } else {\n          children[idx].style.top = 0;\n        }\n      });\n      children.forEach((element: any, idx: number) => {\n        if (idx <= realListStartIndex || idx >= realListendIndex) {\n          element.style.top = '-60px';\n        }\n      });\n      (this as any).$refs.starWrapper.style.visibility = 'visible';\n    }\n  }\n});\n</script>\n\n<style lang=\"scss\">\n@import 'index.scss';\n</style>\n"]}]}
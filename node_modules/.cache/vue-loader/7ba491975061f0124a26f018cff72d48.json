{"remainingRequest":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ailu/Documents/program/nutui-lu/nutui-cat/src/packages/tag/index.vue?vue&type=style&index=0&id=32b00d94&lang=scss&scoped=true&","dependencies":[{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/src/packages/tag/index.vue","mtime":1630492888925},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAnaW5kZXguc2Nzcyc7Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiIA","file":"index.vue","sourceRoot":"src/packages/tag","sourcesContent":["\n<template>\n  <div \n    :class=\"[\n      'nutcat-tag',\n      type ? 'nutcat-tag-' + type : ''\n    ]\"\n    :style=\"styles\" \n  >\n    <div class=\"nutcat-tag-box\">\n      <template v-if=\"beforeIcon\">\n        <nutcat-icon  class=\"before-icon\" :type=\"beforeIcon\"></nutcat-icon>\n      </template>\n      <template v-if=\"tagType\">\n        <nutcat-icon :type=\"tagType\"></nutcat-icon>\n      </template>\n      <template v-if=\"$slots.preSlot\">\n        <span :class=\"classesPre\">\n          <slot name=\"preSlot\"></slot>\n        </span>\n      </template>\n      <span :class=\"classesTag\">\n        <slot></slot>\n      </span>\n      <template v-if=\"afterIcon\">\n        <nutcat-icon class=\"after-icon\" :type=\"afterIcon\"></nutcat-icon>\n      </template>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { createComponent } from '@/utils/create';\nconst { componentName, create } = createComponent('tag');\n\nexport default create({\n  props: {\n    type: {\n      type: String,\n      default: ''\n    },\n    radius: {\n      type: [Boolean, String, Number],\n      default: false\n    },\n    beforeIcon: {\n      type: String,\n      default: ''\n    },\n    afterIcon: {\n      type: String,\n      default: ''\n    },\n    color: {\n      type: String,\n      default: ''\n    },\n    borderColor: {\n      type: String,\n      default: ''\n    },\n    bgColor: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n\t\treturn {\n    };\n\t},\n  components: {},\n  mounted() {\n    \n  },\n  computed: {\n    tagType() {\n      switch((this as any).type) {\n        case 'video-time':\n          return 'triangle-arrow';\n        case 'live-pre':\n          return 'live-pre';\n        case 'live-on':\n          return 'live-on';\n        case 'live-back':\n          return 'live-back';\n        case 'video-time':\n          return 'triangle-arrow';\n        case 'fire-1':\n          return 'huo';\n        case 'fire-2':\n          return 'huo';\n        case 'pin':\n          return 'pin';\n        case 'rank-hot':\n          return 'rank-hot';\n          case 'lbs':\n          return 'lbs'\n        default:\n          break\n      }\n      \n    },\n    classesTag() {\n      return {\n        [componentName+'-content']: true,\n      };\n    },\n    classesPre() {\n      return {\n        [componentName+'-pre']: true,\n      };\n    },\n    styles() {\n      return {\n        'background-color': (this as any).bgColor,\n        'color': (this as any).color,\n        'border-color': (this as any).borderColor,\n        'border-width': (this as any).borderColor ? '1px' : '',\n        'border-style': (this as any).borderColor ? 'solid' : '',\n        'border-radius': (this as any).radius\n      }\n    }\n  },\n  methods: {\n  }\n});\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'index.scss';\n</style>\n"]}]}
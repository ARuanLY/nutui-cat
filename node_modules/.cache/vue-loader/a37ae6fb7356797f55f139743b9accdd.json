{"remainingRequest":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ailu/Documents/program/nutui-lu/nutui-cat/src/packages/progress/index.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/src/packages/progress/index.vue","mtime":1624442983323},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICdpbmRleC5zY3NzJzsK"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6HA","file":"index.vue","sourceRoot":"src/packages/progress","sourcesContent":["<template>\n  <div :class=\"classes\">\n    <div class=\"progress\">\n      <div class=\"ladder\" v-if=\"phases.length\">\n        <div\n          class=\"ladder-item\"\n          v-for=\"(item, i) in phases\"\n          :key=\"i\"\n          @click=\"item.click && item.click(item)\"\n        >\n          <div\n            :class=\"[\n              'ladder-value',\n              'ladder-value-first',\n              percent < item.percent ? '' : 'active'\n            ]\"\n            :style=\"{ left: `calc(${item.percent}% - 28px)` }\"\n            ><span>{{ item.desc }}</span></div\n          >\n        </div>\n      </div>\n      <div class=\"bar\">\n        <div class=\"bar-bg\" ref=\"bar\">\n          <span\n            :class=\"{\n              active: x\n            }\"\n            v-for=\"(x, i) in chunkState\"\n            :key=\"i\"\n          ></span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport { createComponent } from '@/utils/create';\nconst { componentName, create } = createComponent('progress');\n\nexport default create({\n  props: {\n    name: {\n      type: String,\n      default: ''\n    },\n    percentage: {\n      type: Number,\n      default: 0\n    },\n    phases: {\n      type: Array,\n      default: []\n    },\n    animation: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      percent:0,\n      barChunk: 50,\n      chunkState:[]\n    };\n  },\n  components: {},\n  computed: {\n    classes() {\n      return {\n        [componentName + '-page']: true\n      };\n    }\n  },\n  watch: {\n      percentage(newValue, oldValue) {\n        this.percent = newValue \n      }\n    },\n  mounted() {\n    this.$nextTick(() => {\n      \n      this.barChunk = this.needChunk()\n      this.percent = this.percentage\n      if(this.animation){\n        \n        this.chunkState = Array.from({length:this.barChunk},(val,index)=>{\n          return false\n        })\n        this.animated()\n      } else {\n        this.chunkState = Array.from({length:this.barChunk},(val,index)=>{\n          return index < (this.percentage / 100) * this.barChunk?true:false\n        })\n      }\n\n    });\n  },\n  methods: {\n    animated() {\n     \n      let n=0\n      while(n<(this.percentage / 100) * this.barChunk){\n        this.go(n)\n        n++\n      }\n    },\n    go(x){\n      setTimeout(()=>{\n        this.chunkState[x] = true\n        this.$forceUpdate()\n      },30*x)\n    },\n    needChunk(){\n        let barDom = this.$refs.bar;\n        return ~~(barDom.clientWidth / 7);\n    },\n\n    easeOutCubic(pos) {\n      return (pos - 1) ** 3 + 1\n    }\n  }\n});\n</script>\n\n<style lang=\"scss\">\n@import 'index.scss';\n</style>\n  "]}]}
{"remainingRequest":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ailu/Documents/program/nutui-lu/nutui-cat/src/packages/nav/index.vue?vue&type=style&index=0&id=55045fdd&lang=scss&scoped=true&","dependencies":[{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/src/packages/nav/index.vue","mtime":1630492888775},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ailu/Documents/program/nutui-lu/nutui-cat/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgJ2luZGV4LnNjc3MnOwo="},{"version":3,"sources":["index.vue"],"names":[],"mappingsmlBA","file":"index.vue","sourceRoot":"src/packages/nav","sourcesContent":["<template>\n  <div :class=\"classes\" :style=\"styles\" v-if=\"navs && navs.length > 0\">\n    <div\n      :class=\"{ 'nutcat-nav-fixed': sticky && !options.disabled }\"\n      :style=\"stylesFixed\"\n    >\n      <span\n        v-if=\"stickyOptions.showButton\"\n        class=\"nutcat-nav-expand\"\n        ref=\"showAllButton\"\n        @click=\"expand\"\n        :style=\"stylesExpand\"\n      >\n        <span class=\"nutcat-nav-arrow\" :class=\"{ expand: isShowAll }\"></span>\n      </span>\n      <div\n        v-if=\"isShowAll\"\n        class=\"nutcat-nav-expand-topbar\"\n        :style=\"stylesTopBar\"\n        >{{ stickyOptions.title }}</div\n      >\n      <div class=\"nutcat-nav-bar\" ref=\"stickyNav\" :style=\"stylesBar\">\n        <div class=\"scroll-view\" ref=\"scollView\">\n          <ul class=\"nutcat-nav-ul\">\n            <template v-if=\"type == 'left'\">\n              <li\n                class=\"nutcat-nav-item\"\n                :style=\"{\n                  'font-size': stickyOptions.fontSize,\n                  color:\n                    activeIndex == i\n                      ? stickyOptions.activeColor\n                      : stickyOptions.color,\n                  'background-color':\n                    activeIndex == i\n                      ? stickyOptions.activeBgColor\n                      : stickyOptions.bgColor,\n                  height: stickyOptions.navItemHeight\n                }\"\n                v-for=\"(nav, i) in stickyOptions.navs\"\n                :key=\"i\"\n                :class=\"{ active: activeIndex == i }\"\n                ref=\"navitem\"\n                :index=\"i\"\n                @click=\"change(nav, i)\"\n              >\n                <!-- <div class=\"title\" v-if=\"i < stickyOptions.navs.length - 1\">\n                  {{ i + 1 }}F\n                  <span class=\"sub\">{{ activeIndex == i ? '到了' : '' }}</span>\n                </div> -->\n                <div class=\"item-content\">{{ nav }}</div>\n              </li>\n            </template>\n            <template v-else>\n              <li\n                class=\"nutcat-nav-item\"\n                :style=\"{\n                  'font-size': stickyOptions.fontSize,\n                  color:\n                    activeIndex == i\n                      ? stickyOptions.activeColor\n                      : stickyOptions.color\n                }\"\n                v-for=\"(nav, i) in stickyOptions.navs\"\n                :key=\"i\"\n                :class=\"{ active: activeIndex == i }\"\n                ref=\"navitem\"\n                :index=\"i\"\n                @click=\"change(nav, i)\"\n              >\n                <template v-if=\"stickyOptions.icon\">\n                  <nutcat-icon\n                    v-show=\"stickyOptions.showLbs && activeIndex == i\"\n                    :type=\"stickyOptions.icon\"\n                  ></nutcat-icon>\n                </template>\n                <span class=\"content\">{{ nav }}</span>\n                <!-- <span class=\"item-content\">activeIndex:{{activeIndex}}</span> -->\n              </li>\n            </template>\n            <slot></slot>\n          </ul>\n        </div>\n      </div>\n      <div\n        class=\"nutcat-nav-expand-panel\"\n        v-show=\"isShowAll\"\n        :style=\"{\n          top: stickyOptions.navHeight,\n          'background-color': stickyOptions.expendBgColor\n        }\"\n      >\n        <ul class=\"nutcat-nav-ul\">\n          <li\n            class=\"nutcat-nav-item\"\n            :style=\"{\n              'font-size': stickyOptions.fontSize,\n              color:\n                activeIndex == i\n                  ? stickyOptions.expandActiveColor\n                  : stickyOptions.expendColor\n            }\"\n            v-for=\"(nav, i) in navs\"\n            :key=\"i\"\n            :class=\"{ active: activeIndex == i }\"\n            @click=\"change(nav, i)\"\n          >\n            <template v-if=\"stickyOptions.icon\">\n              <nutcat-icon v-show=\"stickyOptions.showLbs && activeIndex == i\" :type=\"stickyOptions.icon\"></nutcat-icon>\n            </template>\n            {{ nav }}\n          </li>\n        </ul>\n      </div>\n    </div>\n\n\n    <div class=\"mask\" v-if=\"isShowAll\" @click=\"isShowAll = false\">\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport { createComponent } from '@/utils/create';\nconst { componentName, create } = createComponent('nav');\nimport assign from 'lodash/assign';\nimport throttle from 'lodash/throttle';\nimport TWEEN from '@tweenjs/tween.js';\nconst DEFAULT_OPTIONS = {\n  title: '请选择分类', // 导航栏展开面板上的标题\n  stickyTop: -1, // 导航栏距离吸顶的top值\n  disabled: false, // 导航栏是否禁止开启吸顶\n  showLbs: false, // 是否显示定位icon\n  showButton: false, // 是否显示展开按钮\n  scrollAnimate: true, // 导航滚动是否使用动画\n  scrollShow: false, // 是否滚动到楼层才展示，默认false\n  scrollDownHide: false, // 向下滚不显示\n  zIndex: 101,\n  icon: 'lbs',\n  threshold: 0,\n\n  navWidth: '51px', // 导航栏宽度，用于左侧导航\n  navHeight: '44px', // 导航栏高度\n  navItemHeight: '58px', // 导航栏高度，用于左侧导航\n  fontSize: '14px', // 导航栏上的文字字号\n  bgColor: '#fff', // 导航栏背景色\n  color: '#2E2D2D', // 导航栏文字颜色\n  activeColor: '#FD0000', // 导航栏选中字体颜色\n  activeBgColor: '#fff', // 导航栏当前选项的背景颜色\n  expendColor: '#2E2D2D', // 导航栏展开面板字体颜色\n  expendTitleColor: '#8c8c8c', // 导航栏展开面板标题颜色\n  expandActiveColor: '#FD0000', // 导航栏展开面板选中字体颜色\n  expendBgColor: '#e5e5e5' // 导航栏展开面板背景色\n};\n\nexport default create({\n  props: {\n    type: {\n      type: String,\n      default: ''\n    },\n    options: {\n      type: [Object, Array],\n      default: ''\n    },\n    navMoudle: {\n      type: [Object, String],\n      default: ''\n    }\n  },\n  data() {\n    return {\n      navs: [],\n      activeIndex: 0,\n      isShowAll: false,\n      translateX: 0,\n      translateY: 0,\n      visable: false,\n      sticky: false,\n      stickyOptions: {},\n      scrollTop: 0,\n      scrollHide: false, // 滚动是否隐藏\n      scrollTimer: null, // 滚动隐藏定时器,\n      isClickScroll: false\n    };\n  },\n  components: {\n  },\n  created() {\n    // console.log('this.type', this.type);\n    this.stickyOptions = assign({}, DEFAULT_OPTIONS, this.options);\n    this.navs = this.stickyOptions.navs;\n  },\n  watch: {\n    options: {\n      handler(value) {\n        assign(this.stickyOptions, value);\n        this.stickyOptions.threshold =\n          // this.stickyOptions.threshold +\n          this.stickyNav.offsetHeight +\n          this.stickyOptions.stickyTop;\n        console.log('watch threshold 2', this.stickyOptions.threshold)\n      },\n      deep: true\n    },\n    translateX(newValue, oldValue) {\n      if (this.stickyOptions.scrollAnimate) {\n        this.tween(oldValue, newValue);\n      } else {\n        this.scrollView.scrollLeft = -newValue;\n      }\n    },\n    translateY(newValue, oldValue) {\n      if (this.stickyOptions.scrollAnimate) {\n        this.tweenY(oldValue, newValue);\n      } else {\n        this.scrollView.scrollTop = -newValue;\n      }\n    },\n    activeIndex(value, oldValue) {\n      setTimeout(() => {\n        if (this.type == 'left') {\n          this.navtoY(value);\n        } else {\n          this.navtoX(value);\n        }\n      }, 0);\n      this.$emit('changed', value);\n    },\n    scrollTop(value, oldValue) {\n      if (this.stickyOptions.scrollDownHide) {\n        if (this.isClickScroll) {\n          setTimeout(() => {\n            this.isClickScroll = false;\n          }, 10);\n        }\n        if (this.isClickScroll) return;\n        const navshowDelay = 2000;\n        const start = this.activeIndex > 0; // 滑过楼层1才生效\n        //down\n        if (value > oldValue && start) {\n          this.scrollHide = true;\n          clearTimeout(this.scrollTimer);\n          this.scrollTimer = null;\n        } else {\n          this.scrollHide = false;\n        }\n        if (!this.scrollTimer) {\n          this.scrollTimer = setTimeout(() => {\n            this.scrollHide = false;\n            this.isClickScroll = false;\n          }, navshowDelay);\n        }\n      }\n    },\n    scrollHide(state) {\n      if(state){\n        this.isShowAll = false\n      }\n      this.$emit('navState', state);\n    },\n    isShowAll(state) {\n      this.$emit('expand', state);\n      let $overlay = this.getOverlay();\n      if ($overlay) {\n        $overlay.style.display = state ? 'block' : 'none';\n      }\n    }\n  },\n  computed: {\n    classes() {\n      return {\n        [componentName]: true,\n        [componentName + '-' + this.type]: this.type,\n        // [`${componentName}-${(this as any).col}`]: (this as any).col,\n        'hide-nutcat-nav': this.stickyOptions.scrollShow && !this.visable,\n        'hide-up': this.scrollHide\n      };\n    },\n    styles() {\n      if (this.stickyOptions.scrollShow) {\n        return 'height: 0';\n      } else {\n        if (this.type == 'left') {\n          return {\n            width: this.stickyOptions.navWidth\n          };\n        }\n        return {\n          height: this.stickyOptions.navHeight\n        };\n      }\n    },\n    stylesFixed() {\n      if (this.type == 'left') {\n        return {\n          width: this.stickyOptions.navWidth\n        };\n      }\n      return {\n        top: this.stickyOptions.stickyTop + 'px',\n        'z-index': this.stickyOptions.zIndex\n      };\n    },\n    stylesExpand() {\n      return {\n        height: this.stickyOptions.navHeight\n      };\n      // return {\n      //   'background-image': `this.bgUrl})`,\n      //   'background-repeat': 'no-repeat',\n      //   'background-position': 'center',\n      //   'background-size': '100% 100%'\n      // };\n    },\n    stylesBar() {\n      return {\n        height: this.stickyOptions.navHeight,\n        'line-height': this.stickyOptions.navHeight,\n        background: this.stickyOptions.bgColor\n      };\n    },\n    stylesTopBar() {\n      return {\n        height: this.stickyOptions.navHeight,\n        'line-height': this.stickyOptions.navHeight,\n        'font-size': this.stickyOptions.fontSize,\n        color: this.stickyOptions.expendTitleColor,\n        background: this.stickyOptions.bgColor\n      };\n    },\n    sections() {\n      if (this.stickyOptions.sectionSelector) {\n        return document.getElementsByClassName(\n          this.stickyOptions.sectionSelector\n        );\n      }\n    },\n    stickyNav() {\n      return this.$refs.stickyNav;\n    },\n    scrollView() {\n      return this.$refs.scollView;\n    },\n    buttonWidth() {\n      return this.$refs.showAllButton.offsetWidth + 'px';\n    }\n  },\n  mounted() {\n    this.stickyOptions.threshold =\n      // this.stickyOptions.threshold +\n      this.stickyNav.offsetHeight +\n      this.stickyOptions.stickyTop;\n\n    console.log('mounted', this.stickyOptions.stickyTop)\n\n    window.addEventListener('scroll', throttle(this.scrollHandle, 100), true);\n    // 监听左侧导航滑动\n    // this.scrollView.addEventListener(\"scroll\", throttle(this.scrollTip, 100));\n\n    if (this.stickyOptions.showButton) {\n      this.insertOverlay();\n      this.stickyNav.style.paddingRight = this.buttonWidth;\n    }\n  },\n  methods: {\n    /* click event */\n    change(item, index) {\n      console.log('item', index)\n      this.isShowAll = false;\n      this.scrollTo(index);\n      this.$emit('click', item, index);\n      this.isClickScroll = true;\n    },\n    //导航条动画\n    tween(startValue, endValue) {\n      function animate() {\n        if (TWEEN.update()) {\n          requestAnimationFrame(animate);\n        }\n      }\n      new TWEEN.Tween({\n        number: startValue\n      })\n        .to(\n          {\n            number: endValue\n          },\n          100\n        )\n        .onUpdate(tween => {\n          this.scrollView.scrollLeft = -tween.number;\n        })\n        .start();\n      animate();\n    },\n    // 左侧导航动画\n    tweenY(startValue, endValue) {\n      function animate() {\n        if (TWEEN.update()) {\n          requestAnimationFrame(animate);\n        }\n      }\n      new TWEEN.Tween({\n        number: startValue\n      })\n        .to(\n          {\n            number: endValue\n          },\n          100\n        )\n        .onUpdate(tween => {\n          this.scrollView.scrollTop = -tween.number;\n        })\n        .start();\n      animate();\n    },\n    scrollTo(index) {\n      const scrollTop = this.getScrollTopElement(this.sections[index]);\n      const dis = this.stickyNav.offsetHeight +\n                                      this.stickyOptions.stickyTop\n      // window.scrollTo(0, scrollTop - dis);\n      // window.scrollTo(0, scrollTop - this.stickyOptions.threshold);\n\n      window.scrollTo(0, scrollTop - this.stickyOptions.threshold);\n    },\n    getScrollTopElement($element) {\n      var top = 0;\n      while (\n        $element.offsetParent !== undefined &&\n        $element.offsetParent != null\n      ) {\n        top +=\n          $element.offsetTop +\n          ($element.clientTop != null ? $element.clientTop : 0);\n        $element = $element.offsetParent;\n      }\n      return top;\n    },\n    // 滑动侧导航隐藏top提示\n    scrollTip() {\n      this.showScrollTip = false;\n      // this.refs.scrollTip\n    },\n    scrollHandle() {\n      if (this.stickyOptions.disabled) {\n        return;\n      }\n      let scrollTop = (this.scrollTop = window.scrollY);\n      // console.log('this.scrollTop', this.scrollTop);\n      // console.log('window.scrollY', window.scrollY);\n      // console.log('scrollTop', scrollTop);\n      const navOffsetTop = this.getScrollTopElement(this.$el);\n\n      // 是否滚动到楼层才显示导航\n\n      if (this.stickyOptions.scrollShow) {\n        if (scrollTop >= navOffsetTop) {\n          this.visable = true;\n        } else {\n          this.visable = false;\n        }\n      }\n      if (this.sections.length) {\n        if (scrollTop < navOffsetTop) {\n          this.activeIndex = 0;\n        }\n        //超过最后一个停止吸顶\n        let lastSection = this.sections[this.sections.length - 1];\n        // console.log('scrollTop', scrollTop)\n        // console.log('scroll', this.getScrollTopElement(lastSection) + lastSection.offsetHeight)\n        if (\n          scrollTop + 200 >\n            this.getScrollTopElement(lastSection) + lastSection.offsetHeight ||\n          scrollTop < navOffsetTop\n        ) {\n          this.sticky = false;\n        } else {\n          this.sticky = true;\n        }\n      }\n      for (let i = 0; i < this.sections.length; i++) {\n        let section = this.sections[i];\n        let offsetTop = this.getScrollTopElement(section);\n        if (\n          offsetTop - this.stickyOptions.threshold <= scrollTop &&\n          offsetTop + section.offsetHeight > scrollTop\n        ) {\n          this.activeIndex = i;\n        }\n      }\n    },\n    //导航栏移动\n    navtoX(index) {\n      const activeItem = this.$refs.navitem[index];\n      const offsetLeft = activeItem.offsetLeft;\n      const touchWidth = this.stickyNav.offsetWidth;\n      const buttonWidth = this.stickyOptions.showButton ? this.buttonWidth : 0;\n      const scrollWidth =\n        this.scrollView.scrollWidth - this.stickyNav.offsetWidth + buttonWidth;\n\n      if (scrollWidth == 0) {\n        return;\n      }\n      const half = (touchWidth - activeItem.offsetWidth) / 2;\n      let changeX = 0;\n      const absTransX = Math.abs(this.translateX);\n\n      if (offsetLeft <= absTransX + half) {\n        // item偏左，需要往右移\n        let pageX = offsetLeft + this.translateX;\n        changeX = half - pageX;\n      } else {\n        // item偏右，需要往左移\n        changeX = -(offsetLeft - absTransX - half);\n      }\n      let lastX = changeX + this.translateX;\n\n      // 两种边界情况\n      lastX > 0 && (lastX = 0);\n      lastX < -scrollWidth && (lastX = -scrollWidth);\n      this.translateX = lastX;\n\n      // this.scrollView.scrollLeft = Math.abs(this.translateX)\n    },\n    // 垂直导航栏移动\n    navtoY(index) {\n      const activeItem = this.$refs.navitem[index];\n      const offsetTop = activeItem.offsetTop; // 距左\n      const touchHeight = this.stickyNav.offsetHeight; // 宽度\n      // const buttonHeight = this.stickyOptions.showButton ? this.buttonHeight : 0;\n      const scrollHeight =\n        this.scrollView.scrollHeight - this.stickyNav.offsetHeight;\n      // console.log(\"activeItem\", activeItem)\n      // console.log(\"offsetTop\", offsetTop)\n      // console.log(\"touchHeight\", touchHeight)\n      // console.log(\"this.scrollView.scrollHeight\", this.scrollView.scrollHeight)\n\n      if (scrollHeight == 0) {\n        return;\n      }\n      const half = (touchHeight - activeItem.offsetHeight) / 2;\n      let changeY = 0;\n      const absTransY = Math.abs(this.translateY);\n      // console.log(\"absTransY\", absTransY)\n      if (offsetTop <= absTransY + half) {\n        // console.log('往上移')\n        // item偏下，需要往上移\n        let pageY = offsetTop + this.translateY;\n        changeY = half - pageY;\n      } else {\n        // console.log('往下移')\n        // item偏上，需要往下移\n        changeY = -(offsetTop - absTransY - half);\n      }\n      let lastY = changeY + this.translateY;\n\n      // 两种边界情况\n      lastY > 0 && (lastY = 0);\n      lastY < -scrollHeight && (lastY = -scrollHeight);\n      this.translateY = lastY;\n\n      // this.scrollView.scrollTop = Math.abs(this.translateX)\n    },\n\n    //展开分类\n    expand() {\n      this.isShowAll = this.isShowAll ? false : true;\n    },\n    //createOverloay\n    insertOverlay() {\n      if (!this.getOverlay()) {\n        var div = document.createElement('div');\n        div.className = 'nutcat-nav-overlay';\n        div.addEventListener('touchstart', () => {\n          div.style.display = 'none';\n          this.isShowAll = false;\n        });\n        div.addEventListener('click', () => {\n          div.style.display = 'none';\n          this.isShowAll = false;\n        });\n        document.body.appendChild(div);\n      }\n    },\n    getOverlay() {\n      return document.getElementsByClassName('nutcat-nav-overlay')[0];\n    }\n  }\n});\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'index.scss';\n</style>\n\n\n\n<style scoped>\n.mask{\n  position: fixed;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}\n</style>"]}]}